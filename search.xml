<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[C语言操作Mysql数据库]]></title>
      <url>/2018/07/07/007C%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9CMysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<img src="/2018/07/07/007C语言操作Mysql数据库/000.png" title="C语言操作Mysql数据库">
<a id="more"></a>
<h1 id="1-Linux下安装Mysql数据库"><a href="#1-Linux下安装Mysql数据库" class="headerlink" title="1.Linux下安装Mysql数据库"></a>1.Linux下安装Mysql数据库</h1><ul>
<li>Linux下安装Mysql数据库可以参考如下的链接：<a href="http://https://www.cnblogs.com/guozhiping/p/7684134.html" target="_blank" rel="noopener">Linux rhel7 下MySQL5.7.18详细安装文档</a></li>
<li>网页丢失了，参考pdf文档，链接：<a href="https://pan.baidu.com/s/1GhfHThQxJ7iKTPstPtOAXw" target="_blank" rel="noopener">https://pan.baidu.com/s/1GhfHThQxJ7iKTPstPtOAXw</a> 密码：nx6s</li>
<li>以下的学习主要参考：MySQL 5.1参考手册，手册链接：<a href="https://pan.baidu.com/s/1GxMEjtOdIaBsnSOUndo7aw" target="_blank" rel="noopener">https://pan.baidu.com/s/1GxMEjtOdIaBsnSOUndo7aw</a> 密码：akll<img src="/2018/07/07/007C语言操作Mysql数据库/001.png" title="C语言操作Mysql数据库">
</li>
</ul>
<h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><h2 id="2-1-测试环境"><a href="#2-1-测试环境" class="headerlink" title="2.1 测试环境"></a>2.1 测试环境</h2><ul>
<li><p>写一个.c文件测试编译环境是否正确，测试代码如下：</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. init</span></span><br><span class="line">    MYSQL mysql;</span><br><span class="line">    <span class="keyword">if</span>(mysql_init(&amp;mysql) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_init error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.close</span></span><br><span class="line">    mysql_close(&amp;mysql);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello word....\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C APIs包含在mysqlclient库文件当中，与MySQL的源代码一块发行，用于连接到数据库和执行数据库查询</p>
</li>
<li>在开发的时候，需要包含头文件mysql.h，和库mysqlclient.so<ul>
<li>分别使用命令<code>find / -name mysql.h</code>和<code>find / -name libmysqlclient.so</code>查找</li>
<li>我的查询结果为：<code>/usr/include/mysql/mysql.h</code>和<code>/usr/lib64/mysql/libmysqlclient.so</code></li>
<li>那么，在编译的时候使用的命令是：<code>gcc -o hello hello.c -I/usr/include/mysql/ -L/usr/lib64/mysql/ -lmysqlclient</code></li>
</ul>
</li>
</ul>
<h2 id="2-2-MYSQL-C-API的常用数据类型"><a href="#2-2-MYSQL-C-API的常用数据类型" class="headerlink" title="2.2 MYSQL C API的常用数据类型"></a>2.2 MYSQL C API的常用数据类型</h2><ul>
<li>MYSQL<ul>
<li>该结构代表1个数据库连接的句柄。几乎所有的MYSQL函数均使用它。</li>
</ul>
</li>
<li>MYSQL_RES<ul>
<li>该结构代表返回行的查询结果</li>
</ul>
</li>
<li>MYSQL_ROW<ul>
<li>这是1行数据的”类型安全”表示。</li>
</ul>
</li>
<li>MYSQL_FIELD<ul>
<li>该结构包含关于字段的信息，如字段名、类型和大小等</li>
</ul>
</li>
<li>MYSQL_FIELD_OFFSET<ul>
<li>这时MYSQL字段列表偏移量的”类型安全”表示</li>
</ul>
</li>
<li>my_ulonglong<ul>
<li>用于行数以及mysql_affected_rows()、mysql_num_rows()和mysql_insert_id()的类型</li>
</ul>
</li>
</ul>
<h2 id="2-3-编程步骤"><a href="#2-3-编程步骤" class="headerlink" title="2.3 编程步骤"></a>2.3 编程步骤</h2><ul>
<li>1  通过调用mysql_init()初始化连接处理程序</li>
<li>2  通过调用mysql_real_connect()连接到服务器</li>
<li>3  发出SQL语句并处理其结果</li>
<li>4  通过调用mysql_close()，关闭与MYSQL服务器的连接</li>
</ul>
<h1 id="3-编程练习"><a href="#3-编程练习" class="headerlink" title="3.编程练习"></a>3.编程练习</h1><h2 id="3-1-初始化、连接、关闭数据库"><a href="#3-1-初始化、连接、关闭数据库" class="headerlink" title="3.1 初始化、连接、关闭数据库"></a>3.1 初始化、连接、关闭数据库</h2><ul>
<li><p>mysql_init()</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MYSQL *mysql_init(MYSQL *mysql) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">分配或初始化与mysql_real_connect()相适应的MYSQL对象。如果mysql是NULL指针，该函数将分配、初始化、并返回新对象。否则，将初始化对象，并返回对象的地址。如果mysql_init()分配了新的对象，当调用mysql_close()来关闭连接时。将释放该对象。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">初始化的MYSQL*句柄。如果无足够内存以分配新的对象，返回NULL。</span><br><span class="line"></span><br><span class="line">错误</span><br><span class="line">在内存不足的情况下，返回NULL</span><br></pre></td></tr></table></figure>
</li>
<li><p>mysql_close()</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void mysql_close(MYSQL *mysql) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">关闭前面打开的连接。如果句柄是由mysql_init()或mysql_connect()自动分配的，mysql_close()还将解除分配由mysql指向的连接句柄。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">无。</span><br><span class="line"></span><br><span class="line">错误</span><br><span class="line">无。</span><br></pre></td></tr></table></figure>
</li>
<li><p>mysql_real_connect()</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">mysql_real_connect()尝试与运行在主机上的MySQL数据库引擎建立连接。在你能够执行需要有效MySQL连接句柄结构的任何其他API函数之前，mysql_real_connect()必须成功完成。</span><br><span class="line"></span><br><span class="line">参数的指定方式如下：</span><br><span class="line">·         第1个参数应是已有MYSQL结构的地址。调用mysql_real_connect()之前，必须调用mysql_init()来初始化MYSQL结构。通过mysql_options()调用，可更改多种连接选项。</span><br><span class="line">·         “host”的值必须是主机名或IP地址。如果“host”是NULL或字符串&quot;localhost&quot;，连接将被视为与本地主机的连接。如果操作系统支持套接字（Unix）或命名管道（Windows），将使用它们而不是TCP/IP连接到服务器。</span><br><span class="line">·         “user”参数包含用户的MySQL登录ID。如果“user”是NULL或空字符串&quot;&quot;，用户将被视为当前用户。在UNIX环境下，它是当前的登录名。在Windows ODBC下，必须明确指定当前用户名</span><br><span class="line">·         “passwd”参数包含用户的密码。如果“passwd”是NULL，仅会对该用户的（拥有1个空密码字段的）用户表中的条目进行匹配检查。这样，数据库管理员就能按特定的方式设置MySQL权限系统，根据用户是否拥有指定的密码，用户将获得不同的权限。</span><br><span class="line">·         “db”是数据库名称。如果db为NULL，连接会将默认的数据库设为该值。</span><br><span class="line">·         如果“port”不是0，其值将用作TCP/IP连接的端口号。注意，“host”参数决定了连接的类型。</span><br><span class="line">·         如果unix_socket不是NULL，该字符串描述了应使用的套接字或命名管道。注意，“host”参数决定了连接的类型。</span><br><span class="line">·         client_flag的值通常为0</span><br></pre></td></tr></table></figure>
</li>
<li><p>错误处理：mysql_error OR mysql_errno</p>
</li>
<li><p>一个小例子</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. init</span></span><br><span class="line">    MYSQL mysql;</span><br><span class="line">    <span class="keyword">if</span>(mysql_init(&amp;mysql) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_init error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. connect</span></span><br><span class="line">    <span class="keyword">if</span>(mysql_real_connect(&amp;mysql,<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"123"</span>,<span class="string">"mydb61"</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_real_connect error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. close</span></span><br><span class="line">    mysql_close(&amp;mysql);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello word....\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>补充：也可另一种方式来进行连接。先用MYSQL_READ_DEFAULT_FILE作为选项名来调用mysql_options(), 再调用mysql_real_connect()来连接服务器</p>
<ul>
<li>mysql_options(*mysql, MYSQL_READ_DEFAULT_FILE, “my.cnf”)</li>
<li>mysql_real_connect(*mysql, NULL, NULL, NULL, NULL, 0, NULL, 0)</li>
<li>说明：my.cnf文件中记录了连接MySQL服务器所需的各项参数（地址，端口，用户名，密码，数据库，字符集，Unix Socket等）。这样可以灵活的修改连接参数而不必重新编译程序</li>
</ul>
</li>
</ul>
<h2 id="3-2-insert、update、select、delete"><a href="#3-2-insert、update、select、delete" class="headerlink" title="3.2 insert、update、select、delete"></a>3.2 insert、update、select、delete</h2><ul>
<li><p>调用mysql_query()来执行SQL语句，如果语句中包含二进制数据，则需要调用<br>mysql_real_query()</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int mysql_query(MYSQL *mysql, const char *query) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">1.执行由“Null终结的字符串”查询指向的SQL查询。正常情况下，字符串必须包含1条SQL语句，而且不应为语句添加终结分号（‘;’）或“\g”。如果允许多语句执行，字符串可包含多条由分号隔开的语句。</span><br><span class="line">2.mysql_query()不能用于包含二进制数据的查询，应使用mysql_real_query()取而代之（二进制数据可能包含字符‘\0’，mysql_query()会将该字符解释为查询字符串结束）。</span><br><span class="line">3.如果希望了解查询是否应返回结果集，可使用mysql_field_count()进行检查。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">如果查询成功，返回0。如果出现错误，返回非0值</span><br></pre></td></tr></table></figure>
</li>
<li><p>若执行的是UPDATE, DELETE或INSERT语句，则可通过mysql_affected_rows()获知<br>受影响的记录数</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">my_ulonglong mysql_affected_rows(MYSQL *mysql) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">返回上次UPDATE更改的行数，上次DELETE删除的行数，或上次INSERT语句插入的行数。对于UPDATE、DELETE或INSERT语句，可在mysql_query()后立刻调用。对于SELECT语句，mysql_affected_rows()的工作方式与mysql_num_rows()类似。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">大于0的整数表明受影响或检索的行数。“0”表示UPDATE语句未更新记录，在查询中没有与WHERE匹配的行，或未执行查询。“-1”表示查询返回错误，或者，对于SELECT查询，在调用mysql_store_result()之前调用了mysql_affected_rows()。由于mysql_affected_rows()返回无符号值，通过比较返回值和“(my_ulonglong)-1”或等效的“(my_ulonglong)~0”，检查是否为“-1”。</span><br><span class="line"></span><br><span class="line">错误</span><br><span class="line">无。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">mysql_query(&amp;mysql,&quot;UPDATE products SET cost=cost*1.25 WHERE group=10&quot;);</span><br><span class="line">printf(&quot;%ld products updated&quot;,(long) mysql_affected_rows(&amp;mysql));</span><br><span class="line">如果在连接至mysqld时指定了标志CLIENT_FOUND_ROWS，对于UPDATE语句，mysql_affected_rows()将返回WHERE语句匹配的行数。</span><br><span class="line"></span><br><span class="line">注意，使用REPLACE命令时，如果新行替代了旧行，mysql_affected_rows()返回2。这是因为，在该情况下，删除了重复行后插入了1行。</span><br><span class="line"></span><br><span class="line">如果使用“INSERT ... ON DUPLICATE KEY UPDATE”来插入行，如果行是作为新行插入的，mysql_affected_rows()返回1，如果是更新了已有的行，返回2。</span><br></pre></td></tr></table></figure>
</li>
<li><p>若执行的是SELECT语句，则有两种方式来获取结果集</p>
<ul>
<li><p>一种方式是通过mysql_store_result()将整个结果集全部取回来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_RES *mysql_store_result(MYSQL *mysql) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">1.对于成功检索了数据的每个查询（SELECT、SHOW、DESCRIBE、EXPLAIN、CHECK TABLE等），必须调用mysql_store_result()或mysql_use_result() 。</span><br><span class="line">2.对于其他查询，不需要调用mysql_store_result()或mysql_use_result()，但是如果在任何情况下均调用了mysql_store_result()，它也不会导致任何伤害或性能降低。通过检查mysql_store_result()是否返回0，可检测查询是否没有结果集（以后会更多）。</span><br><span class="line">3.如果希望了解查询是否应返回结果集，可使用mysql_field_count()进行检查</span><br><span class="line">mysql_store_result()将查询的全部结果读取到客户端，分配1个MYSQL_RES结构，并将结果置于该结构中。</span><br><span class="line">4.如果查询未返回结果集，mysql_store_result()将返回Null指针（例如，如果查询是INSERT语句）。</span><br><span class="line">5.一旦调用了mysql_store_result()并获得了不是Null指针的结果，可调用mysql_num_rows()来找出结果集中的行数。</span><br><span class="line">6.可以调用mysql_fetch_row()来获取结果集中的行，或调用mysql_row_seek()和mysql_row_tell()来获取或设置结果集中的当前行位置。</span><br><span class="line">7.一旦完成了对结果集的操作，必须调用mysql_free_result()。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">具有多个结果的MYSQL_RES结果集合。如果出现错误，返回NULL。</span><br></pre></td></tr></table></figure>
</li>
<li><p>另一种方式则是调用mysql_use_result()初始化获取操作，但暂时不取回任何记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_RES *mysql_use_result(MYSQL *mysql) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">1.对于成功检索数据的每个查询（SELECT、SHOW、DESCRIBE、EXPLAIN），必须调用mysql_store_result()或mysql_use_result()。</span><br><span class="line">2.mysql_use_result()将初始化结果集检索，但并不像mysql_store_result()那样将结果集实际读取到客户端。它必须通过对mysql_fetch_row()的调用，对每一行分别进行检索。这将直接从服务器读取结果，而不会将其保存在临时表或本地缓冲区内，与mysql_store_result()相比，速度更快而且使用的内存也更少。客户端仅为当前行和通信缓冲区分配内存，分配的内存可增加到max_allowed_packet字节。</span><br><span class="line">3.不应与从mysql_use_result()返回的结果一起使用mysql_data_seek()、mysql_row_seek()、mysql_row_tell()、mysql_num_rows()或mysql_affected_rows()，也不应发出其他查询，直至mysql_use_result()完成为止。（但是，提取了所有行后，mysql_num_rows()将准确返回提取的行数）。</span><br><span class="line">4.一旦完成了对结果集的操作，必须调用mysql_free_result()。</span><br><span class="line">5.使用libmysqld嵌入式服务器时，由于在调用mysql_free_result()之前，内存使用将随着每个检索的行增加，内存效益将基本丧失。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">MYSQL_RES结果结构。如果出现错误，返回NULL。</span><br></pre></td></tr></table></figure>
</li>
<li><p>两种方法均通过mysql_fetch_row()来访问每一条记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ROW mysql_fetch_row(MYSQL_RES *result) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">1.检索结果集的下一行。在mysql_store_result()之后使用时，如果没有要检索的行，mysql_fetch_row()返回NULL。在mysql_use_result()之后使用时，如果没有要检索的行或出现了错误，mysql_fetch_row()返回NULL。</span><br><span class="line">2.行内值的数目由mysql_num_fields(result)给出。如果行中保存了调用mysql_fetch_row()返回的值，将按照row[0]到row[mysql_num_fields(result)-1]，访问这些值的指针。行中的NULL值由NULL指针指明。</span><br><span class="line">3.可以通过调用mysql_fetch_lengths()来获得行中字段值的长度。对于空字段以及包含NULL的字段，长度为0。通过检查字段值的指针，能够区分它们。如果指针为NULL，字段为NULL，否则字段为空。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">下一行的MYSQL_ROW结构。如果没有更多要检索的行或出现了错误，返回NULL。</span><br></pre></td></tr></table></figure>
</li>
<li><p>当处理完结果集后，调用mysql_free_result()来释放它所占的内存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void mysql_free_result(MYSQL_RES *result) </span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">1.释放由mysql_store_result()、mysql_use_result()、mysql_list_dbs()等为结果集分配的内存。完成对结果集的操作后，必须调用mysql_free_result()释放结果集使用的内存。</span><br><span class="line">2.释放完成后，不要尝试访问结果集。</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">无。</span><br><span class="line"></span><br><span class="line">错误</span><br><span class="line">无。</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一个小例子</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1. init</span></span><br><span class="line">    MYSQL mysql;</span><br><span class="line">    <span class="keyword">if</span>(mysql_init(&amp;mysql) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_init error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. connect</span></span><br><span class="line">    <span class="keyword">if</span>(mysql_real_connect(&amp;mysql,<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"123"</span>,<span class="string">"mydb61"</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_real_connect error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. select</span></span><br><span class="line">    <span class="keyword">char</span> *sql = <span class="string">"select * from dept"</span>;</span><br><span class="line">    ret = mysql_query(&amp;mysql,sql);</span><br><span class="line">    <span class="keyword">if</span>(ret!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_query error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL_RES *result = mysql_store_result(&amp;mysql);</span><br><span class="line">    <span class="keyword">if</span>(result==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mysql_errno(&amp;mysql);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"func mysql_store_result error:%d\n"</span>,ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL_ROW row = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// int ncols = mysql_num_fields(result);</span></span><br><span class="line">    <span class="keyword">int</span> ncols = mysql_field_count(&amp;mysql);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(row = mysql_fetch_row(result))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf("%s\t%s\t%s\t\n",row[0],row[1],row[2]);</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ncols;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\t"</span>,row[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_free_result(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. close</span></span><br><span class="line">    mysql_close(&amp;mysql);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello word....\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-3-乱码问题解决：query的时候设置解析方式"><a href="#3-3-乱码问题解决：query的时候设置解析方式" class="headerlink" title="3.3 乱码问题解决：query的时候设置解析方式"></a>3.3 乱码问题解决：query的时候设置解析方式</h2><ul>
<li><p>可以在所有的查询之前设置一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&amp;mysql,&quot;set names utf8&quot;);</span><br><span class="line">ret = mysql_query(&amp;mysql,sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以每一次查询的时候都设置一次</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 嵌入式SQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle Pro*C 编程入门]]></title>
      <url>/2018/07/05/006Oracle-Pro-C-%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<img src="/2018/07/05/006Oracle-Pro-C-编程入门/004.png" title="Oracle Pro*C 编程入门">
<a id="more"></a>
<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><h2 id="1-1-什么是Pro-c程序"><a href="#1-1-什么是Pro-c程序" class="headerlink" title="1.1 什么是Pro*c程序"></a>1.1 什么是<code>Pro*c</code>程序</h2><ul>
<li>在oracle数据库管理系统中，有三种访问数据库的方法：<ul>
<li>1.用 <code>SQL*Plus</code>，直接输入sql命令以命令行交换的方式访问数据库</li>
<li>2.用一些应用开发工具来访问数据库(PL/SQL developer)</li>
<li>3.利用在语言内嵌入sql语言或者调用oracle库函数来访问数据库，例如<code>Pro*c</code></li>
</ul>
</li>
<li><code>Pro*C</code>把过程化语言c和非过程化语言sql最完善的结合起来，具有完备的过程处理能力，又能完成任何数据库的处理任务，使用户可以通过编程完成各种类型的报表。</li>
<li>在<code>Pro*C</code>程序中嵌入sql语言，利用这些sql语言可以完成动态地建立、修改和删除数据库中的表，也可以查询、插入、修改和删除数据库表中的行，还可以实现事务的提交和回滚。</li>
<li>一句话，通过在过程化编程语言C/C++中嵌入SQL语句而开发出的应用程序</li>
<li>补充1：什么是嵌入式SQL？<ul>
<li>在通用编程语言中使用的SQL称为嵌入式SQL</li>
<li>在SQL标准中定义了多种语言的嵌入式SQL</li>
<li>各个厂商对嵌入式SQL的具体实现不同</li>
</ul>
</li>
<li>补充2：什么是宿主语言？<ul>
<li>嵌入式SQL的载体是宿主语言<img src="/2018/07/05/006Oracle-Pro-C-编程入门/000.png" title="宿主语言-Pro程序">
</li>
</ul>
</li>
</ul>
<h2 id="1-2-Oracle-预编译器"><a href="#1-2-Oracle-预编译器" class="headerlink" title="1.2 Oracle 预编译器"></a>1.2 Oracle 预编译器</h2><ul>
<li>功能：完成<code>Pro*C</code>源程序到纯<code>C</code>源程序的转换</li>
<li><p><code>Pro*c/c++</code>应用程序完整开发流程</p>
<ul>
<li><p>普通c程序: C源文件(.c) -&gt; 目标文件(.o) -&gt; 可执行文件</p>
<img src="/2018/07/05/006Oracle-Pro-C-编程入门/001.png" title="普通c程序开发流程">
</li>
<li><p><code>Pro*c/c++</code>程序: <code>Pro*C</code> 源文件(.pc) -&gt; C源文件(.c) -&gt; 目标文件(.o) -&gt; 可执行文件</p>
<img src="/2018/07/05/006Oracle-Pro-C-编程入门/002.png" title="Pro*c/c++程序开发流程">
</li>
</ul>
</li>
<li><p>基本命令格式(.pc -&gt; .c/.cc)</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">proc iname=filename [OptionName1=value1]…[OptionNameN=valueN]</span><br><span class="line"><span class="number">1.</span>常用编译选项:</span><br><span class="line">    INAME=path <span class="keyword">and</span> filename (name of the input file) <span class="number">1.</span>pc</span><br><span class="line">    ONAME=path <span class="keyword">and</span> filename (name of the output file) <span class="number">1.</span>c  <span class="number">1.</span>cc</span><br><span class="line">    INCLUDE=path  (头文件所在路径）</span><br><span class="line">    --INCLUDE =路径名 或 INCLUDE =(路径名<span class="number">1</span>,路径名<span class="number">2</span>)</span><br><span class="line">    PARSE=FULL | PARTIA | NONE (<span class="keyword">default</span> FULL <span class="keyword">for</span> C, Others <span class="keyword">for</span> C++)</span><br><span class="line">    CODE=ANSI_C | CPP (<span class="keyword">default</span> ansi_c)</span><br><span class="line">    USERID=username/password</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>编译<span class="number">1</span>个含有嵌入式SQL的C++ (hello.pc用C++语法写的):</span><br><span class="line">parse=none 		告诉proc编译器 按照c++规范解析 dm02_hello.pc</span><br><span class="line">code=cpp 		告诉proc编译器	按照c++规范 生产文件</span><br><span class="line">proc hello.pc parse=none code=cpp oname=hello.cc</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>编译<span class="number">1</span>个含有嵌入式SQL的C (hello.pc用C语法写的):</span><br><span class="line">proc hello.pc</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="2-Pro-C-语法结构"><a href="#2-Pro-C-语法结构" class="headerlink" title="2. Pro*C 语法结构"></a>2. <code>Pro*C</code> 语法结构</h1><h2 id="2-1-嵌入-SQL-语句在程序中的标志"><a href="#2-1-嵌入-SQL-语句在程序中的标志" class="headerlink" title="2.1 嵌入 SQL 语句在程序中的标志"></a>2.1 嵌入 SQL 语句在程序中的标志</h2><ul>
<li>嵌入式语句以 EXEC SQL 开头， 以分号结束</li>
</ul>
<h2 id="2-2-换行"><a href="#2-2-换行" class="headerlink" title="2.2 换行"></a>2.2 换行</h2><ul>
<li>当一行写不下一条嵌入式 SQL 语句时， 可以用反斜线()换行(也可以不用, 但为了程序的可读性好一些， 建议使用)</li>
</ul>
<h2 id="2-3-程序结构"><a href="#2-3-程序结构" class="headerlink" title="2.3 程序结构"></a>2.3 程序结构</h2><ul>
<li>每一个 <code>Pro*C</code> 程序都包括两部分：（1）应用程序首部；（2）应用程序体</li>
<li>应用程序首部定义了 ORACLE 数据库的有关变量， 为在 C 语言中操纵 ORACLE 数据库做好了准备</li>
<li>应用程序体基本上由 <code>Pro*C</code> 的 SQL 语句调用组成。主要指查询SELECT、INSERT、UPDATE、DELETE 等语句</li>
<li>应用程序的组成结构如图所示:<img src="/2018/07/05/006Oracle-Pro-C-编程入门/003.png" title="应用程序的组成结构图">
</li>
</ul>
<h2 id="2-4-大小写"><a href="#2-4-大小写" class="headerlink" title="2.4 大小写"></a>2.4 大小写</h2><ul>
<li>嵌入式语句内不区分大小写</li>
</ul>
<h2 id="2-5-宿主变量"><a href="#2-5-宿主变量" class="headerlink" title="2.5 宿主变量"></a>2.5 宿主变量</h2><ul>
<li>宿主变量的使用是为了实现 Oracle 数据库和应用程序之间的数据通信</li>
<li>定义: <code>Pro*C</code> 中宿主变量有两种定义方法<ul>
<li>ANSI 方法 <ul>
<li>按照 ANSI 标准， 只有在 <code>Pro*C</code> 预编译程序的宿主变量声明区内声明的变量才能做为宿主变量</li>
<li>宿主变量声明区域为 EXEC SQL BEGIN DECLARE SECTION和 EXEC SQL END DECLARE SECTION 语句之间的区域</li>
</ul>
</li>
<li>Oracle 方法<ul>
<li>Oracle 对 ANSI 标准进行了扩充， 它允许在程序中的任何部分声明宿主变量 </li>
<li>所以， 当把预编译选项 MODE 设为 ORACLE 时， 应用程序不必在指定的声明区域内声明宿主变量</li>
</ul>
</li>
<li>使用:<ul>
<li>SQL 语句或 PL/SQL 块参照宿主变量时， 必须在宿主变量名称前加冒号, 以区别于 Oracle 数据库对象名称</li>
<li>但在 C 语句在使用这些变量时， 则不能加冒号</li>
</ul>
</li>
</ul>
</li>
<li>注意： <code>Pro*C</code> 应用程序中不能使用宿主变量提供数据库对象名称， 所以， 在CREATE, ALTER 和 DROP 等 DDL 语句中不能使用输入宿主变量</li>
</ul>
<h1 id="3-小试牛刀：Pro-C-C-开发基础"><a href="#3-小试牛刀：Pro-C-C-开发基础" class="headerlink" title="3. 小试牛刀：Pro*C/C++开发基础"></a>3. 小试牛刀：<code>Pro*C/C++</code>开发基础</h1><h2 id="3-1-开发流程"><a href="#3-1-开发流程" class="headerlink" title="3.1 开发流程"></a>3.1 开发流程</h2><ul>
<li><p>编写.pc代码(hello.pc)</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ok...\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用proc编译，在当前目录下打开终端，输入 <code>proc hello.pc</code></p>
</li>
<li><p>使用gcc编译</p>
<ul>
<li>1.要找到sqlca.h的位置，打开终端输入 <code>find / -name sqlca.h</code><ul>
<li>查询结果为：<code>/u01/app/oracle/product/12.2/db_1/precomp/public/sqlca.h</code></li>
</ul>
</li>
<li>2.接着，要找到使用的动态库libclntsh.so, 打开终端输入 <code>find / -name libclntsh.so</code><ul>
<li>查询结果为：<code>/u01/app/oracle/product/12.2/db_1/lib/libclntsh.so</code></li>
</ul>
</li>
<li>ok，现在可以编写gcc命令了，在当前目录下打开终端，输入 <code>gcc -o hello hello.c -I/u01/app/oracle/product/12.2/db_1/precomp/public/ -L/u01/app/oracle/product/12.2/db_1/lib/ -lclntsh</code></li>
</ul>
</li>
<li><p>运行hello程序， 在当前目录下打开终端，输入 <code>./hello</code></p>
</li>
<li>如果上述过程没有问题，那么恭喜，整个开发流程没有错误。</li>
<li>这里我实践的时候，报了一堆堆错误，找到第一条后，发现是大致的意思是：proc工具预编译时找不到stddef.h<ul>
<li><code>PCC-S-02015, unable to open include file Error at line 15, column 10 in file /usr/include/_G_config.h #include &lt;stddef.h&gt;</code></li>
<li>解决方法（pcscfg.cfg这个文件配置有错误）：<ul>
<li>1.找到文件pcscfg.cfg的位置， <code>find / -name pcscfg.cfg</code></li>
<li>2.找到stddef.h文件的位置和版本信息， <code>find / -name stddef.h</code></li>
<li>3.打开1中文件pcscfg.cfg文件，替换stddef.h路径和版本信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-2-连接数据库"><a href="#3-2-连接数据库" class="headerlink" title="3.2 连接数据库"></a>3.2 连接数据库</h2><ul>
<li><p>上述流程全部OK后，我们接着从连接数据库开始，连接数据库有3种方法</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法1</span></span><br><span class="line">EXEC SQL CONNECT :usr_pwd;</span><br><span class="line"><span class="comment">-- 方法2</span></span><br><span class="line">EXEC SQL CONNECT :username IDENTIFIED BY :password ;</span><br><span class="line"><span class="comment">-- 方法3</span></span><br><span class="line"><span class="comment">/* connect to the nondefault database using db_name */</span></span><br><span class="line">EXEC SQL CONNECT :username IDENTIFIED BY :password</span><br><span class="line">   AT :db_name USING :db_string;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里提供一个使用方法1的例子：使用用户名xiangbin，密码xb1207，连接orcl</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span> *serversid = <span class="string">"xiangbin/xb1207@orcl"</span>;</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">    	<span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>几点说明：</p>
<ul>
<li><code>#include &quot;sqlca.h&quot;</code> 为要包含的头文件</li>
<li><p>sqlca是一个结构类型的变量，它是oracle和应用程序的一个接口。在执行Pro*C程序时，oracle把每一个嵌入SQL语句执行的状态信息存入sqlca中，根据这些信息，可判断SQL语句的执行是否成功，处理的行数，错误信息等，结构体组成如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sqlca</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> sqlcaid[<span class="number">8</span>]; <span class="comment">//标识通讯区</span></span><br><span class="line">    <span class="keyword">long</span> sqlabc;     <span class="comment">//通序区的长度</span></span><br><span class="line">    <span class="keyword">long</span> sqlcode;    <span class="comment">//最近执行的SQL语句的状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> sqlerrml;<span class="comment">//信息文本长度</span></span><br><span class="line">    <span class="keyword">char</span> sqlerrmc[<span class="number">10</span>];<span class="comment">//错误正文</span></span><br><span class="line">    &#125;sqlerrm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> sqlerrp[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">char</span> sqlerrd[<span class="number">6</span>];<span class="comment">//当前oracle的状态，sqlerrd[2]才有意义，表示DML语句处理的行数</span></span><br><span class="line">    <span class="keyword">char</span> sqlwarn[<span class="number">8</span>];<span class="comment">//提供可能遇到的条件信息</span></span><br><span class="line">    <span class="keyword">char</span> sqlext[<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sqlca</span> <span class="title">sqlca</span>;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sqlcode的值如下：</p>
<ul>
<li>等于0 表示SQL语句被正确执行</li>
<li>大于0 oracle执行了该语句，但遇到一个例外（例如没有找到任何数据）</li>
<li>小于0 表示由于数据库、系统、网络或者应用程序的错误，oracle未执行该语句，当出现这一类错误时，当前事务一般应该回滚。</li>
</ul>
</li>
</ul>
</li>
<li><p>another example:</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span> user[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> pwd[<span class="number">20</span>] =&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> dbname[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf("serversid: %s\n",serversid);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(user,<span class="string">"xiangbin"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(pwd,<span class="string">"xb1207"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(dbname,<span class="string">"orcl"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//EXEC SQL connect :serversid;</span></span><br><span class="line"></span><br><span class="line">    EXEC SQL CONNECT :user IDENTIFIED BY :pwd USING :dbname;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">    <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-3-数据的-insert、update、delete、select"><a href="#3-3-数据的-insert、update、delete、select" class="headerlink" title="3.3 数据的 insert、update、delete、select"></a>3.3 数据的 insert、update、delete、select</h2><ul>
<li>insert、update、delete、select对应的代码分别如下</li>
<li><p>这里select是简单的使用，只查询1行，详细的使用后面的小节</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span> *serversid = <span class="string">"xiangbin/xb1207@orcl"</span>;</span><br><span class="line">    <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">char</span> dname[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> loc[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> deptno2;</span><br><span class="line">    <span class="keyword">char</span> dname2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> loc2[<span class="number">20</span>];</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================== 1. connect ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_coon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">    <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================== 2. insert ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert</span></span><br><span class="line">    deptno = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(dname,<span class="string">"YIZHEN"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(loc,<span class="string">"YIZHEN"</span>);</span><br><span class="line">    <span class="function">EXEC SQL insert into <span class="title">test</span><span class="params">(deptno,dname,loc)</span> <span class="title">values</span> <span class="params">(:deptno,:dname,:loc)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================== 3. update ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert</span></span><br><span class="line">    deptno = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter the dname:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,dname);</span><br><span class="line"></span><br><span class="line">    EXEC SQL update test <span class="built_in">set</span> dname=:dname where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================== 4. delete ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    deptno = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    EXEC SQL <span class="keyword">delete</span> test where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================== 5. select ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// select</span></span><br><span class="line">    deptno = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    EXEC SQL select deptno,dname,loc into :deptno2,:dname2,:loc2 from test where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"select ok...\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"deptno=%d, dname=%s,loc=%s\n"</span>,deptno2,dname2,loc2);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="4-循序渐进：Pro-C-C-开发提高"><a href="#4-循序渐进：Pro-C-C-开发提高" class="headerlink" title="4. 循序渐进：Pro*C/C++开发提高"></a>4. 循序渐进：<code>Pro*C/C++</code>开发提高</h1><h2 id="4-1-中文乱码问题"><a href="#4-1-中文乱码问题" class="headerlink" title="4.1 中文乱码问题"></a>4.1 中文乱码问题</h2><ul>
<li>乱码来源，这里使用的是SecureCRT连接远程的RedHat<ul>
<li>SecureCRT的字符集<ul>
<li>解决：在SecureCRT的设置选项中设置下就好</li>
</ul>
</li>
<li>RedHat数据库字符集的设置<ul>
<li>解决：来到oracle用户的家目录下，打开该目录下的.bash_profile文件，添加环境变量<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> NLS_LANG=<span class="string">"SIMPLIFIED CHINESE_CHINA.ZHS16GBK"</span>（简体中文gbk）</span><br><span class="line"><span class="keyword">export</span> NLS_LANG=<span class="string">"SIMPLIFIED CHINESE_CHINA.AL32UTF8"</span>（简体中文utf8）===&gt; 这个比较好</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-宿主变量和指示器变量"><a href="#4-2-宿主变量和指示器变量" class="headerlink" title="4.2 宿主变量和指示器变量"></a>4.2 宿主变量和指示器变量</h2><ul>
<li><p>宿主变量</p>
<ul>
<li>宿主变量是一种<code>Pro*c</code>语言变量, 用于在应用程序中和oracle数据库之间传递数据</li>
<li><code>Pro*C</code>程序中，既可在SQL语句中引用，也可在C语句中引用的变量称为SQL变量</li>
<li>其申明语法与普通C变量一致，但在CODE=CPP或 MODE=ANSI 时变量必须放在申明区</li>
<li>可使用pointer 作为宿主变量，使用前分配空间</li>
<li><p><code>在DDL语句中不能用宿主变量</code> 。错误例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> table_name[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;table_name;</span><br><span class="line">EXEC SQL DROP TABLE :table_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>宿主变量的数据类型</p>
<img src="/2018/07/05/006Oracle-Pro-C-编程入门/005.png" title="Oracle Pro*C 编程入门">
</li>
<li><p>宿主变量的使用</p>
<ul>
<li>输入 – 将应用程序的数据传递到数据库中</li>
<li>输出 – 将数据库的数据传递到应用程序中</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、input example:</span><br><span class="line"><span class="keyword">int</span> salary, emp_number;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;salary;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;emp_number;</span><br><span class="line">EXEC SQL update emp <span class="built_in">set</span> sal=:salary where empno= :emp_number;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、output example:</span><br><span class="line"><span class="keyword">float</span> v_salary;</span><br><span class="line"><span class="keyword">char</span> v_job;</span><br><span class="line">EXEC SQL select sal,job INTO :v_salary, :v_job from emp where empno = <span class="number">7788</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v_salary&lt;&lt;v_job;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预编译选项 CHAR_MAP</p>
<ul>
<li>CHAR_MAP=CHARZ (默认设置): ‘\0’结尾，定长，空格补齐 ==&gt;(也就数说，当char danme[20]中从数据库中读取的数据长度没有20个字节的时候，他用空格给你填充到19，然后最后一位’\0’)</li>
<li>CHAR_MAP=CHARF | VARCHAR2：定长，空格补齐</li>
<li>CHAR_MAP=STRING：     ‘\0’结尾，变长</li>
</ul>
</li>
<li><p>VARCHAR</p>
<ul>
<li>变长, 不是‘\0’结尾</li>
<li>在proc编译成.c的时候，会解释成如下格式<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct&#123;</span><br><span class="line">		 <span class="keyword">unsigned</span> <span class="keyword">short</span> len;</span><br><span class="line">		 <span class="keyword">unsigned</span> <span class="keyword">char</span> arr[ ];</span><br><span class="line">		&#125;variable_name</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>综合使用的一个例子</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line"></span><br><span class="line">typedef char (TypeStr)[20];  // a)</span><br><span class="line"></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span> *serversid = <span class="string">"xiangbin/xb1207@orcl"</span>;</span><br><span class="line">    <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">char</span> dname[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> loc[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> deptno2;</span><br><span class="line">    <span class="keyword">char</span> dname2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> loc2[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> deptno3;</span><br><span class="line">    varchar dname3[<span class="number">20</span>];</span><br><span class="line">    varchar loc3[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// b)</span></span><br><span class="line">    <span class="function">EXEC SQL TYPE TypeStr is <span class="title">string</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c)</span></span><br><span class="line">    <span class="keyword">int</span> deptno4;</span><br><span class="line">    TypeStr dname4;</span><br><span class="line">    TypeStr loc4;</span><br><span class="line"></span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// select</span></span><br><span class="line">    deptno = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 1. white space is contained in the output of printf</span></span><br><span class="line">    <span class="comment">// deptno=10, dname=AAA                ,loc=10AAA </span></span><br><span class="line">    EXEC SQL select deptno,dname,loc into :deptno2,:dname2,:loc2 from test where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"deptno=%d, dname=%s,loc=%s\n"</span>,deptno2,dname2,loc2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. white space is not contained in the output of printf</span></span><br><span class="line">    <span class="comment">// deptno=10, dname=AAA,loc=10AAA</span></span><br><span class="line">    EXEC SQL select deptno,dname,loc into :deptno3,:dname3,:loc3 from test where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"deptno=%d, dname=%s,loc=%s\n"</span>,deptno3,dname3.arr,loc3.arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. white space is not contained in the output of printf</span></span><br><span class="line">    <span class="comment">// deptno=10, dname=AAA,loc=10AAA</span></span><br><span class="line">    EXEC SQL select deptno,dname,loc into :deptno4,:dname4,:loc4 from test where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"deptno=%d, dname=%s,loc=%s\n"</span>,deptno4,dname4,loc4);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"select ok...over.....\n"</span>);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>指示器变量</p>
<ul>
<li><code>短整型</code>变量，用于处理数据库的NULL值，监督和管理与其相关联的宿主变量(短整型，短整型，短整型)</li>
<li>引用语法：<code>:host_variable INDICATOR :indicator_variable</code> OR <code>:host_variable:indicator_variable</code></li>
<li>如果输入的变量中加入了指示器变量，并且指示器变量的值为-1，那么无论输入变量输入是否有值，插入数据库的都是NULL</li>
<li>我们可以通过在SQL语句的输出变量后面加上指示器变量，然后通过判断指示器变量的值是否是-1，从而确定读取的输出变量是否为NULL</li>
<li><p>取值的具体含义</p>
<ul>
<li>-1：数据库表列的值为NULL，指示变量相关联的输出宿主变量值不确定</li>
<li>等于0：Oracle将数据库表列值原封不动的赋给指示器变量相关联的输出宿主变量</li>
<li>大于0： Oracle将数据库表列值截断后赋给指示器变量相关联的输出宿主变量，指示器变量值为该列值的原始长度</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span>    desc[<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">short</span>   ind_desc;</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line">…</span><br><span class="line">EXEC SQL SELECT emp_desc INTO :desc :ind_desc FROM emp WHERE emp_no=<span class="number">7788</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ind_desc &lt; <span class="number">0</span>)</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;“emp_desc is <span class="literal">NULL</span>”;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt; desc &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于指示器变量使用的一个小例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span> *serversid = <span class="string">"xiangbin/xb1207@orcl"</span>;</span><br><span class="line">    <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">char</span> dname[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> loc[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">short</span> loc_ind;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> deptno2;</span><br><span class="line">    <span class="keyword">char</span> dname2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> loc2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span> loc2_ind;</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert null</span></span><br><span class="line">    deptno = <span class="number">55</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(dname,<span class="string">"YIZHEN"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(loc,<span class="string">"YIZHEN"</span>);</span><br><span class="line">    loc_ind=<span class="number">-1</span>;</span><br><span class="line">    <span class="function">EXEC SQL insert into <span class="title">test</span><span class="params">(deptno,dname,loc)</span> <span class="title">values</span> <span class="params">(:deptno,:dname,:loc:loc_ind)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// select null</span></span><br><span class="line">    EXEC SQL select deptno,dname,loc into :deptno2,:dname2,:loc2:loc2_ind from test where deptno=:deptno;</span><br><span class="line">    <span class="keyword">if</span>(sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect error:%d\n"</span>,sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> sqlca.sqlcode;</span><br><span class="line">    &#125;</span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(loc2_ind == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(loc2,<span class="string">"null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"select ok...\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"deptno=%d, dname=%s,loc=%s\n"</span>,deptno2,dname2,loc2);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="4-3-错误处理机制"><a href="#4-3-错误处理机制" class="headerlink" title="4.3 错误处理机制"></a>4.3 错误处理机制</h2><ul>
<li>在使用SQL语句和<code>PRO*C</code>对数据库进行操作时，常常有字段空值，无条件删除，无行返回，数据溢出和截断等现象发生，这种现象可以用sqlca和指示器变量来检测</li>
<li>如果每一次执行sql语句后都要通过sqlca.sqlcode的值来判断是否出错，那么是比较繁琐的，一种简单的方法是通过错误处理机制来实现简化</li>
<li><p>所有的SQL语句都有可能出错,所以都要加以判断，但每个SQL语句后都加错误判断，太麻烦了，可以用一个函数来进行处理</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sql_error</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sql_error</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>这样当发生sqlca.sqlcode &lt; 0的错误时，程序自动转到sql_error中执行，而sqlcode&gt;0的错误是不会自动转到 sql_error函数执行的</code></p>
</li>
<li>WHENEVER语句的范围：WHENEVER是定义语句，他会自动的检测应用程序中的所有sql语句。当编写<code>Pro*C/C++</code>的时候，WHENEVER应该放在第一条内嵌的sql语句（例如connect）之前。如果程序中有多条的WHENEVER语句，那么只有最近的那一条语句起作用</li>
<li><p>一个使用错误机制的简单例子</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span> *serversid = <span class="string">"xiangbin/xb12071@orcl"</span>;</span><br><span class="line">    <span class="keyword">int</span> deptno;</span><br><span class="line">    <span class="keyword">char</span> dname[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> loc[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> deptno2;</span><br><span class="line">    <span class="keyword">char</span> dname2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> loc2[<span class="number">20</span>];</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the function prints the error reason</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EXEC SQL WHENEVER SQLERROR CONTINUE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"error reason: %.*s\n"</span>,sqlca.sqlerrm.sqlerrml,sqlca.sqlerrm.sqlerrmc);</span><br><span class="line"></span><br><span class="line">    EXEC SQL rollback work release;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the function prints the error sql</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerr2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>	stm[<span class="number">120</span>];</span><br><span class="line">    <span class="keyword">size_t</span>	sqlfc, stmlen=<span class="number">120</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    EXEC SQL WHENEVER SQLERROR CONTINUE;</span><br><span class="line"></span><br><span class="line">    ret = sqlgls(stm, &amp;stmlen, &amp;sqlfc);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if (ret != 0)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf("func sqlgls() err, %d \n", ret);</span></span><br><span class="line"><span class="comment">        return ;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出错的SQL:%.*s\n"</span>, stmlen, stm);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出错原因:%.*s\n"</span>, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);</span><br><span class="line">    <span class="comment">//printf("出错原因:%.70s\n", sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);</span></span><br><span class="line">    EXEC SQL ROLLBACK WORK RELEASE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================== connect ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EXEC SQL WHENEVER SQLERROR DO sqlerr();</span></span><br><span class="line">    <span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sqlerr2</span><span class="params">()</span></span>;</span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-4-sqlca通信区"><a href="#4-4-sqlca通信区" class="headerlink" title="4.4 sqlca通信区"></a>4.4 sqlca通信区</h2><ul>
<li>通信区：为了取得每个sql语句执行后的相关状态说明，以便进行错误的后续操作或跟踪</li>
<li>oracle中提供了两个通信区<ul>
<li>SQL通信区：sqlca</li>
<li>Oracle通信区：oraca</li>
</ul>
</li>
<li>sqlca通信区<ul>
<li>执行proc程序时，oracle把每一条sql中状态信息存入sqlca中，包括错误代码、警告标志设置、诊断文本和处理行数等</li>
<li>本质上，sqlca是一个结构体</li>
<li>proc每执行一条sql语句，都会把相关信息写入到sqlca，覆盖上一条sql语句的执行的结果信息，所以需要获取执行结果信息的话，要执行完马上获取<img src="/2018/07/05/006Oracle-Pro-C-编程入门/006.png" title="sqlca中重要的字段"></li>
</ul>
</li>
<li>oraca通信区<ul>
<li>一个类似于sqlca的结构，可以作为sqlca通信区的补充。当需要获取更为详细的状态信息，可以使用oraca</li>
<li>oraca通信区对sqlca的补充</li>
<li>可以使用oraca获取执行的sql语句的文本</li>
</ul>
</li>
</ul>
<h2 id="4-5-宿主数组操作数据"><a href="#4-5-宿主数组操作数据" class="headerlink" title="4.5 宿主数组操作数据"></a>4.5 宿主数组操作数据</h2><ul>
<li>我们可以批量的插入数据和批量的查找数据，这个时候单个变量不足以存储查询到的数据，因此我们需要使用数组</li>
<li>查询数据的时候，sql语句返回的成功执行的条数放入变量 count = sqlca.sqlerrd[2]中</li>
<li>插入的时候，记得在insert语句前面加上for :count</li>
<li><p>几个注意点：</p>
<ul>
<li><code>Pro*C</code>不支持数组指针</li>
<li><code>Pro*C</code>所支持数组最大维数是32767，超出此限制将报错</li>
<li>在SQL语句中使用数组变量，只需给出：和变量名称，不要给下标</li>
<li><p>示例</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXEC SQL <span class="keyword">BEGIN</span> <span class="keyword">DECLARE</span> <span class="keyword">SECTION</span>;</span><br><span class="line">        int emp_number[100];</span><br><span class="line">        char emp_name[100][15];</span><br><span class="line">EXEC SQL <span class="keyword">END</span> <span class="keyword">DECLARE</span> <span class="keyword">SECTION</span>;</span><br><span class="line"></span><br><span class="line">EXEC SQL <span class="keyword">SELECT</span> <span class="built_in">number</span>,<span class="keyword">name</span> <span class="keyword">INTO</span> :emp_number, :emp_name <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一个综合使用的例子</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">// 1. include the header file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. declare the parameter</span></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="keyword">char</span>	*serversid = <span class="string">"xiangbin/xb1207@orcl"</span>;</span><br><span class="line">    <span class="keyword">int</span>		deptno;</span><br><span class="line">    <span class="keyword">char</span> 	dname[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> 	loc[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> 	deptno2[<span class="number">100</span>];</span><br><span class="line">    varchar dname2[<span class="number">100</span>][<span class="number">20</span>];</span><br><span class="line">    varchar loc2[<span class="number">100</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span> 	loc2_ind[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> 	count;</span><br><span class="line"></span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the function prints the error sql</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerr2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>	stm[<span class="number">120</span>];</span><br><span class="line">    <span class="keyword">size_t</span>	sqlfc, stmlen=<span class="number">120</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    EXEC SQL WHENEVER SQLERROR CONTINUE;</span><br><span class="line"></span><br><span class="line">    ret = sqlgls(stm, &amp;stmlen, &amp;sqlfc);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if (ret != 0)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf("func sqlgls() err, %d \n", ret);</span></span><br><span class="line"><span class="comment">        return ;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出错的SQL:%.*s\n"</span>, stmlen, stm);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出错原因:%.*s\n"</span>, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);</span><br><span class="line">    <span class="comment">//printf("出错原因:%.70s\n", sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);</span></span><br><span class="line">    EXEC SQL ROLLBACK WORK RELEASE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//struct sqlca sqlca;  // must have</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serversid: %s\n"</span>,serversid);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sqlerr2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// connect</span></span><br><span class="line">    EXEC SQL connect :serversid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// select</span></span><br><span class="line">    EXEC SQL select deptno,dname,loc into :deptno2,:dname2,:loc2:loc2_ind from test;</span><br><span class="line">    count = sqlca.sqlerrd[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"count = %d\n"</span>,count);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"deptno=%d, dname=%s,loc=%s\n"</span>,deptno2[i],dname2[i].arr,loc2[i].arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert</span></span><br><span class="line">    EXEC SQL create table test1 as select * from test where <span class="number">1</span>=<span class="number">2</span>;  <span class="comment">// create table</span></span><br><span class="line">    EXEC SQL <span class="keyword">for</span>:<span class="function">count insert into test1 <span class="title">values</span> <span class="params">(:deptno2,:dname2,:loc2:loc2_ind)</span></span>;</span><br><span class="line"></span><br><span class="line">    EXEC SQL commit;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"select,insert ok...\n"</span>);</span><br><span class="line">    <span class="comment">//printf("deptno=%d, dname=%s,loc=%s\n",deptno2,dname2,loc2);</span></span><br><span class="line">    EXEC SQL commit release;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-6-关于Proc、宿主变量、指示变量、数组变量、通信区sqlca，oraca"><a href="#4-6-关于Proc、宿主变量、指示变量、数组变量、通信区sqlca，oraca" class="headerlink" title="4.6 关于Proc、宿主变量、指示变量、数组变量、通信区sqlca，oraca"></a>4.6 关于Proc、宿主变量、指示变量、数组变量、通信区sqlca，oraca</h2><ul>
<li>一个比较好的网页链接：<a href="https://www.cnblogs.com/Kernel001/archive/2017/10/23/7714446.html" target="_blank" rel="noopener">Proc、宿主变量、指示变量、数组变量、通信区</a></li>
<li>如果网页打不开，点击链接：<a href="https://pan.baidu.com/s/1hFDIuwKGVBgpjr_N82x_jw" target="_blank" rel="noopener">https://pan.baidu.com/s/1hFDIuwKGVBgpjr_N82x_jw</a> 密码：gw1e</li>
</ul>
<h1 id="5-游标"><a href="#5-游标" class="headerlink" title="5. 游标"></a>5. 游标</h1><h2 id="5-1-普通游标"><a href="#5-1-普通游标" class="headerlink" title="5.1 普通游标"></a>5.1 普通游标</h2><ul>
<li>使用宿主数组操作数据既有好处，也有坏处。当数据量很小的时候，很方便，但是当数据量很大的时候，不太合适。这时候可以使用游标</li>
<li>游标是为某一次查询而生的，也就是说游标是为了select语句而生，一定和某一条select语句相关联</li>
<li>普通游标只可以往后一直走</li>
<li>遍历右边的时候如何判断访问结束？？ sqlca.sqlcode=100 (ansi组织标准) || sqlca.sqlcode=1403(oracle标准)</li>
<li>补充：使用varchar和使用自定义的char数组的区别<ul>
<li>使用varchar，如果第一次读取的时候，字符串长度为20，第二次读取的时候字符串长度为10（假设第一次使用完后没有memset），那么第二次输出的是第二次读取的10字节+第一次读取的10个字节</li>
<li>使用自定义的char数组并且在宿主变量中使用EXEC TYPE自动转换为string类型，那么不会出现上述的问题</li>
</ul>
</li>
<li>操作游标有由 4 条命令：<ul>
<li>（1） DECLARE CURSOR；</li>
<li>（2） OPEN CURSOR；</li>
<li>（3） FETCH；</li>
<li>（4） CLOSE CURSOR<img src="/2018/07/05/006Oracle-Pro-C-编程入门/007.png" title="操作游标"></li>
</ul>
</li>
<li><p>一个综合使用的例子</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerr</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//连接数据</span></span><br><span class="line"><span class="comment">// create table dept2  as select * from dept where 1=2 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> dnameType[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> locType[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//先定义宿主变量 (SQL变量)</span></span><br><span class="line">EXEC SQL BEGIN  DECLARE SECTION ;</span><br><span class="line">    <span class="keyword">char</span> * serverid = <span class="string">"xiangbin/xb1207@orcl"</span>;</span><br><span class="line">    <span class="keyword">int</span> 	deptid;</span><br><span class="line">    <span class="keyword">char</span>	DNAME[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span>  	LOC[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">int</span> 	count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> 		deptno2;</span><br><span class="line">    varchar		dname2[<span class="number">20</span>];  <span class="comment">//proc编译器 对这个数据类型进行 转换 </span></span><br><span class="line">    varchar 	loc2[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">short</span>		loc_ind2; </span><br><span class="line">    </span><br><span class="line">    <span class="function">EXEC SQL TYPE dnameType is <span class="title">string</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">EXEC SQL TYPE locType is <span class="title">string</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> 			deptno3;</span><br><span class="line">    dnameType		dname3;  <span class="comment">//proc编译器 对这个数据类型进行 转换 </span></span><br><span class="line">    locType 		loc3;</span><br><span class="line">    <span class="keyword">short</span>			loc_ind3;</span><br><span class="line"></span><br><span class="line">EXEC SQL END  DECLARE SECTION ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_varchar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>	ret = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serverid:%s \n"</span>, serverid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做一个错误处理函数</span></span><br><span class="line">    <span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sqlerr</span><span class="params">()</span></span>;</span><br><span class="line">    EXEC SQL connect :serverid;	</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 定义游标</span></span><br><span class="line">     EXEC SQL DECLARE c CURSOR FOR select deptno, dname, loc from dept;</span><br><span class="line">    <span class="comment">//2.  打开游标</span></span><br><span class="line">    EXEC SQL  OPEN c ;</span><br><span class="line">   <span class="comment">//  (Open cursor: put the select results into a memory place,  </span></span><br><span class="line">    <span class="comment">//  and the cursor pointer points to the first row data.)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//3.  提取数据 fetch into</span></span><br><span class="line">            <span class="built_in">memset</span>(dname2.arr, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            <span class="built_in">memset</span>(loc2.arr, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            EXEC SQL FETCH c INTO :deptno2, :dname2, :loc2:loc_ind2;</span><br><span class="line">            <span class="keyword">if</span> (sqlca.sqlcode == <span class="number">100</span> || sqlca.sqlcode == <span class="number">1403</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//访问结束</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (loc_ind2 == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(loc2.arr, <span class="string">"NULL"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t%s\t%s\n "</span>, deptno2, dname2.arr, loc2.arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 关闭游标</span></span><br><span class="line">    EXEC SQL CLOSE c;</span><br><span class="line"></span><br><span class="line">    EXEC SQL COMMIT RELEASE; <span class="comment">//提交事务断开连接</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>	ret = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"serverid:%s \n"</span>, serverid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//做一个错误处理函数</span></span><br><span class="line">    <span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sqlerr</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    EXEC SQL connect :serverid;	</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1。定义游标</span></span><br><span class="line">     EXEC SQL DECLARE c CURSOR FOR select deptno, dname, loc from dept;</span><br><span class="line">    <span class="comment">//2.  打开游标</span></span><br><span class="line">    EXEC SQL  OPEN c ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//3.  提取数据 fetch into</span></span><br><span class="line">            <span class="comment">//memset(dname2.arr, 0, 20);</span></span><br><span class="line">            <span class="comment">//memset(loc2.arr, 0, 20);</span></span><br><span class="line">            EXEC SQL FETCH c INTO :deptno3, :dname3, :loc3:loc_ind3;</span><br><span class="line">            <span class="keyword">if</span> (sqlca.sqlcode == <span class="number">100</span> || sqlca.sqlcode == <span class="number">1403</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//访问结束</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (loc_ind3 == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(loc3, <span class="string">"NULL"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\t%s\t%s\n "</span>, deptno3, dname3,  loc3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.  </span></span><br><span class="line">    EXEC SQL CLOSE c;</span><br><span class="line"></span><br><span class="line">    EXEC SQL COMMIT RELEASE; <span class="comment">//提交事务断开连接</span></span><br><span class="line">    <span class="keyword">return</span> ret;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-2-滚动游标"><a href="#5-2-滚动游标" class="headerlink" title="5.2 滚动游标"></a>5.2 滚动游标</h2><ul>
<li>区别于普通游标，可以往任何位置走</li>
<li><p>一个简单的例子</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlca.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//演示滚动游标查询数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">sqlgls</span><span class="params">(<span class="keyword">char</span> * , <span class="keyword">size_t</span> *, <span class="keyword">size_t</span> * )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">sqlglmt</span><span class="params">(<span class="keyword">void</span> *,<span class="keyword">char</span> *,<span class="keyword">size_t</span> *,<span class="keyword">size_t</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connet</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerr02</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqlerr02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>	stm[<span class="number">120</span>];</span><br><span class="line">    <span class="keyword">size_t</span>	sqlfc, stmlen=<span class="number">120</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出错时,可以把错误SQL语言给打印出来</span></span><br><span class="line">    EXEC SQL WHENEVER SQLERROR CONTINUE;</span><br><span class="line"></span><br><span class="line">    ret = sqlgls(stm, &amp;stmlen, &amp;sqlfc);	</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出错的SQL:%.*s\n"</span>, stmlen, stm);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"出错原因:%.*s\n"</span>, sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);</span><br><span class="line">    EXEC SQL ROLLBACK WORK RELEASE;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nodata</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"没有发现数据\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = sqlca.sqlcode;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"sqlca.sqlcode: err:%d \n"</span>, sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> dnameType[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> locType[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">EXEC SQL BEGIN DECLARE SECTION;</span><br><span class="line">    <span class="function">EXEC SQL TYPE dnameType is <span class="title">string</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">EXEC SQL TYPE locType is <span class="title">string</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="keyword">char</span> 	*usrname = <span class="string">"scott"</span>;</span><br><span class="line">    <span class="keyword">char</span> 	*passwd = <span class="string">"tiger"</span>;</span><br><span class="line">    <span class="keyword">char</span> 	*serverid = <span class="string">"orcl"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>				deptno;</span><br><span class="line">    dnameType		dname; <span class="comment">//string 数据类型  </span></span><br><span class="line">    <span class="keyword">short</span> 			dname_ind;</span><br><span class="line">    locType 		loc;</span><br><span class="line">    <span class="keyword">short</span> 			loc_ind;	</span><br><span class="line">EXEC SQL END DECLARE SECTION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;	</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">EXEC SQL WHENEVER SQLERROR DO <span class="title">sqlerr02</span><span class="params">()</span></span>;</span><br><span class="line">    connet();</span><br><span class="line">    <span class="comment">//EXEC SQL WHENEVER NOT FOUND DO nodata();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 定义游标  declare cursor  在为某一次查询</span></span><br><span class="line">    EXEC SQL DECLARE c SCROLL CURSOR FOR </span><br><span class="line">        select deptno, dname, loc from dept;</span><br><span class="line">    <span class="comment">//2 打开游标 open cursor </span></span><br><span class="line">    EXEC SQL OPEN c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//EXEC SQL WHENEVER NOT FOUND DO break;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 获取数据 fetch data</span></span><br><span class="line">    <span class="comment">// 3.1 查询最后一条数据</span></span><br><span class="line">    EXEC SQL FETCH LAST c INTO :deptno, :dname:dname_ind, :loc:loc_ind;</span><br><span class="line">    <span class="comment">//printf("条目数:%d\t", sqlca.sqlerrd[2]);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t %s\t %s \n"</span>, deptno, dname, loc );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.2 查询第一条数据</span></span><br><span class="line">    EXEC SQL FETCH FIRST c INTO :deptno, :dname:dname_ind, :loc:loc_ind;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t %s\t %s \n"</span>, deptno, dname, loc );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.3 查询第2条数据</span></span><br><span class="line">    EXEC SQL FETCH ABSOLUTE <span class="number">2</span> c INTO :deptno, :dname:dname_ind, :loc:loc_ind;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t %s\t %s \n"</span>, deptno, dname, loc );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.4 查询相对第2条数据 也就是第4条</span></span><br><span class="line">    EXEC SQL FETCH RELATIVE <span class="number">2</span> c INTO :deptno, :dname:dname_ind, :loc:loc_ind;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t %s\t %s \n"</span>, deptno, dname, loc );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.5 查询下一条</span></span><br><span class="line">    EXEC SQL FETCH NEXT c INTO :deptno, :dname:dname_ind, :loc:loc_ind;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t %s\t %s \n"</span>, deptno, dname, loc );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.6 查询前一条</span></span><br><span class="line">    EXEC SQL FETCH PRIOR  c INTO :deptno, :dname:dname_ind, :loc:loc_ind;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\t %s\t %s \n"</span>, deptno, dname, loc );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4 关闭游标 close data</span></span><br><span class="line">    EXEC SQL CLOSE c;	</span><br><span class="line">    EXEC SQL COMMIT WORK RELEASE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"return ok...\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    EXEC SQL CONNECT:usrname IDENTIFIED BY:passwd USING:serverid ;</span><br><span class="line">    <span class="keyword">if</span> (sqlca.sqlcode != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = sqlca.sqlcode;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"sqlca.sqlcode: err:%d \n"</span>, sqlca.sqlcode);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connect ok...\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="6-动态SQL"><a href="#6-动态SQL" class="headerlink" title="6. 动态SQL"></a>6. 动态SQL</h1><ul>
<li>输入sql语句，动态查询结果，类似sqlplus客户端</li>
<li>相当于自己再次实现一个oracle api接口</li>
<li>ansi方式<ul>
<li>比oracle方式简单一点</li>
<li>不需要自己打造输入输出缓冲区</li>
</ul>
</li>
<li>oracle方式<ul>
<li>自己打造输入输出缓冲区</li>
<li>oracle数据类型的转换</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Pro*C </tag>
            
            <tag> 嵌入式SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle数据库的使用]]></title>
      <url>/2018/07/03/005oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<img src="/2018/07/03/005oracle数据库的使用/000.jpg" title="Oracle数据库">
<a id="more"></a>
<h1 id="1-Oracle数据的安装"><a href="#1-Oracle数据的安装" class="headerlink" title="1.Oracle数据的安装"></a>1.Oracle数据的安装</h1><h2 id="1-1-Windows下虚拟机环境-Oracle数据库的安装"><a href="#1-1-Windows下虚拟机环境-Oracle数据库的安装" class="headerlink" title="1.1 Windows下虚拟机环境+Oracle数据库的安装"></a>1.1 Windows下虚拟机环境+Oracle数据库的安装</h2><ul>
<li>网上教程很多，这里学习的话推荐按照这篇博客搭建：<a href="https://blog.csdn.net/pan_tian/article/details/39523607" target="_blank" rel="noopener">15分钟搭建Linux操作系统+Oracle数据库的环境</a></li>
<li>如果连接丢失了，请移步网盘链接：<a href="https://pan.baidu.com/s/1UAY-V0TidR0su9-tuw6CDQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1UAY-V0TidR0su9-tuw6CDQ</a> 密码：i2wo</li>
</ul>
<h2 id="1-2-Mac下虚拟机环境-Oracle数据库的安装"><a href="#1-2-Mac下虚拟机环境-Oracle数据库的安装" class="headerlink" title="1.2 Mac下虚拟机环境+Oracle数据库的安装"></a>1.2 Mac下虚拟机环境+Oracle数据库的安装</h2><ul>
<li>上述搭建过程在Mac下要注意一点，那就是安装完成虚拟机之后，发现上面没有管理这个菜单栏，那么如何导入虚拟机文件么？</li>
<li>双击.ova文件即可</li>
</ul>
<h1 id="2-Oracle数据库的基本概念"><a href="#2-Oracle数据库的基本概念" class="headerlink" title="2.Oracle数据库的基本概念"></a>2.Oracle数据库的基本概念</h1><h2 id="2-1一个-Oracle-服务器"><a href="#2-1一个-Oracle-服务器" class="headerlink" title="2.1一个 Oracle 服务器"></a>2.1一个 Oracle 服务器</h2><ul>
<li>是一个数据管理系统(RDBMS)，它提供开放的, 全面的, 近乎完整的信息管理</li>
<li>由一个<code>Oracle 实例</code> 和一个 <code>Oracle 数据库</code>组成</li>
<li>Oracle 数据库: 位于硬盘上实际存放数据的文件, 这些文件组织在一起, 成为一个逻辑整体, 即为 Oracle 数据库。 因此在 Oracle 看来, “数据库” 是指硬盘上文件的逻辑集合, 必须要与内存里实例合作, 才能对外提供数据管理服务。</li>
<li>Oracle 实例: 位于物理内存里的数据结构. 它由一个共享的内存池和多个后台进程所组成, 共享的内存池可以被所有进程访问。 用户如果要存取数据库(也就是硬盘上的文件) 里的数据, 必须通过实例才能实现, 不能直接读取硬盘上的文件。</li>
</ul>
<h2 id="2-2-Oracle数据库的结构"><a href="#2-2-Oracle数据库的结构" class="headerlink" title="2.2 Oracle数据库的结构"></a>2.2 Oracle数据库的结构</h2><img src="/2018/07/03/005oracle数据库的使用/001.png" title="Oracle数据库的结构">
<h2 id="2-3-管理机制"><a href="#2-3-管理机制" class="headerlink" title="2.3 管理机制"></a>2.3 管理机制</h2><ul>
<li>oracle：基于用户的管理机制<ul>
<li>创建一个信息系统, 给你分配一个用户, 创建表空间 ..创建表..  </li>
</ul>
</li>
<li>mysql：基于数据库的管理机制<ul>
<li>创建一个信息系统,创建一个数据库</li>
</ul>
</li>
</ul>
<h1 id="3-基本的select语句"><a href="#3-基本的select语句" class="headerlink" title="3.基本的select语句"></a>3.基本的select语句</h1><h2 id="3-1-简单使用规则"><a href="#3-1-简单使用规则" class="headerlink" title="3.1 简单使用规则"></a>3.1 简单使用规则</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>	*|&#123;[<span class="keyword">DISTINCT</span>] <span class="keyword">column</span>|expression [<span class="keyword">alias</span>],...&#125;</span><br><span class="line"><span class="keyword">FROM</span>	<span class="keyword">table</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>说明</p>
<ul>
<li>SQL 语言<code>大小写不敏感</code></li>
<li>SQL 可以写在一行或者多行</li>
<li><code>关键字（例如select）不能被缩写也不能分行</code></li>
<li>各子句一般要分行写</li>
<li>使用缩进提高语句的可读性</li>
</ul>
</li>
<li><p>总结</p>
<ul>
<li><p>select后面可以是属性列</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>select后面可以是表达式</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary, salary + <span class="number">300</span></span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure>
</li>
<li><p>select后面可以是函数</p>
</li>
</ul>
</li>
</ul>
<h2 id="3-2-列的别名"><a href="#3-2-列的别名" class="headerlink" title="3.2 列的别名"></a>3.2 列的别名</h2><ul>
<li>重命名一个列</li>
<li>便于计算</li>
<li>紧跟列名，也可以在列名和别名之间加入关键字AS，别名使用<code>双引号</code>，以便在别名中包含空格或特殊的字符并区分大小写</li>
<li>AS可以省略；当别名没有空格的时候，双引号可以省略</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="string">"Name"</span>, salary*<span class="number">12</span> <span class="string">"Annual Salary"</span></span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> <span class="keyword">name</span>, commission_pct comm</span><br><span class="line"><span class="keyword">FROM</span>   employees;  <span class="comment">-- 省略双引号，省略as</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-连接符"><a href="#3-3-连接符" class="headerlink" title="3.3 连接符"></a>3.3 连接符</h2><ul>
<li>把列与列，列与字符连接在一起</li>
<li>用 ‘||’表示</li>
<li>可以用来‘合成’列</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>	last_name||job_id <span class="keyword">AS</span> <span class="string">"Employees"</span></span><br><span class="line"><span class="keyword">FROM</span> 	employees;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-字符串"><a href="#3-4-字符串" class="headerlink" title="3.4 字符串"></a>3.4 字符串</h2><ul>
<li>字符串可以是 SELECT 列表中的一个字符,数字,日期</li>
<li>日期和字符只能在<code>单引号</code>中出现（单引号，单引号，单引号）</li>
<li>每当返回一行时，字符串被输出一次</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name ||<span class="string">' is a '</span>||job_id </span><br><span class="line">		<span class="keyword">AS</span> <span class="string">"Employee Details"</span></span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure>
<h2 id="3-5-捣蛋鬼NULL"><a href="#3-5-捣蛋鬼NULL" class="headerlink" title="3.5 捣蛋鬼NULL"></a>3.5 捣蛋鬼NULL</h2><ul>
<li>空值是无效的，未指定的，未知的或不可预知的值</li>
<li>空值不是空格或者0</li>
<li>注意点：<ul>
<li>任何表达式和null运算都为空</li>
<li>null != null （查询不为空的时候，使用的是 xx is not null ，而不是 xx !=null）</li>
</ul>
</li>
</ul>
<h1 id="4-过滤和排序"><a href="#4-过滤和排序" class="headerlink" title="4. 过滤和排序"></a>4. 过滤和排序</h1><h2 id="4-1-过滤"><a href="#4-1-过滤" class="headerlink" title="4.1 过滤"></a>4.1 过滤</h2><ul>
<li>使用where语句，将不满足条件的语句过滤掉</li>
<li>where 子句紧随 from 子句</li>
<li>between: 来显示在一个区间内的值(包含两端)</li>
<li>in: 显示列表中的值</li>
<li>like: 模糊查询<ul>
<li>% 代表零个或多个字符(任意个字符)</li>
<li>_代表一个字符</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>	*|&#123;[<span class="keyword">DISTINCT</span>] <span class="keyword">column</span>|expression [<span class="keyword">alias</span>],...&#125;</span><br><span class="line"><span class="keyword">FROM</span>	<span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span>	condition(s)];</span><br></pre></td></tr></table></figure>
<h2 id="4-2-字符和日期"><a href="#4-2-字符和日期" class="headerlink" title="4.2 字符和日期"></a>4.2 字符和日期</h2><ul>
<li>字符和日期要包含在单引号中（单引号，单引号，单引号）</li>
<li>字符大小写敏感，日期格式敏感</li>
<li>默认的日期格式是 DD-MON-RR</li>
</ul>
<h2 id="4-3-排序"><a href="#4-3-排序" class="headerlink" title="4.3 排序"></a>4.3 排序</h2><ul>
<li>使用 ORDER BY 子句排序<ul>
<li>ASC（ascend）: 升序 </li>
<li>DESC（descend）: 降序</li>
</ul>
</li>
<li>排序的规则<ul>
<li>可以按照select语句中的列名排序</li>
<li>可以按照别名列名排序</li>
<li>可以按照select语句中的列名的顺序值排序</li>
<li>如果要按照多列进行排序，则规则是先按照第一列排序，如果相同，则按照第二列排序；以此类推</li>
<li>Desc:</li>
</ul>
</li>
</ul>
<h1 id="5-单行函数"><a href="#5-单行函数" class="headerlink" title="5 单行函数"></a>5 单行函数</h1><h2 id="5-1-SQL函数"><a href="#5-1-SQL函数" class="headerlink" title="5.1 SQL函数"></a>5.1 SQL函数</h2><ul>
<li>SQL 函数</li>
<li><p>注意：函数可以没有参数，但必须要有返回值</p>
<img src="/2018/07/03/005oracle数据库的使用/002.png" title="SQL 函数">
</li>
<li><p>两种 SQL 函数</p>
<img src="/2018/07/03/005oracle数据库的使用/003.png" title="两种 SQL 函数">
</li>
</ul>
<h2 id="5-2单行函数"><a href="#5-2单行函数" class="headerlink" title="5.2单行函数"></a>5.2单行函数</h2><ul>
<li>操作数据对象</li>
<li>接受参数返回一个结果</li>
<li>只对一行进行变换</li>
<li>每行返回一个结果</li>
<li>可以转换数据类型</li>
<li>可以嵌套</li>
<li>参数可以是一列或一个值<img src="/2018/07/03/005oracle数据库的使用/004.png" title="单行函数">
</li>
</ul>
<h1 id="6-分组函数"><a href="#6-分组函数" class="headerlink" title="6.分组函数"></a>6.分组函数</h1><h2 id="6-1-什么是分组函数"><a href="#6-1-什么是分组函数" class="headerlink" title="6.1 什么是分组函数"></a>6.1 什么是分组函数</h2><ul>
<li>分组函数作用于一组数据，并对一组数据返回一个值。</li>
<li>AVG</li>
<li>COUNT</li>
<li>MAX</li>
<li>MIN</li>
<li>SUM</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>	[<span class="keyword">column</span>,] group_function(<span class="keyword">column</span>), ...</span><br><span class="line"><span class="keyword">FROM</span>		<span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span>	condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>	<span class="keyword">column</span>]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span>	<span class="keyword">column</span>];</span><br></pre></td></tr></table></figure>
<h2 id="6-2-GROUP-BY-子句"><a href="#6-2-GROUP-BY-子句" class="headerlink" title="6.2 GROUP BY 子句"></a>6.2 GROUP BY 子句</h2><ul>
<li>在SELECT 列表中所有未包含在组函数中的列都应该包含在 GROUP BY 子句中</li>
<li>包含在 GROUP BY 子句中的列不必包含在SELECT 列表中</li>
<li>不能在 WHERE 子句中使用组函数（注意）</li>
<li>可以在 HAVING 子句中使用组函数</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016校招真题-其他：顺时针旋转矩阵]]></title>
      <url>/2018/01/18/004%E5%85%B6%E4%BB%96%EF%BC%8C%E9%A1%BA%E6%97%B6%E9%92%88%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/</url>
      <content type="html"><![CDATA[<img src="/2018/01/18/004其他，顺时针旋转矩阵/000.png" title="2016校招真题-其他：顺时针旋转矩阵">
<a id="more"></a>
<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h1><ul>
<li>有一个NxN整数矩阵，请编写一个算法，将矩阵顺时针旋转90度。</li>
<li>给定一个NxN的矩阵，和矩阵的阶数N,请返回旋转后的NxN矩阵,保证N小于等于300。</li>
<li>测试样例：<code>[[1,2,3],[4,5,6],[7,8,9]],3</code></li>
<li>返回：<code>[[7,4,1],[8,5,2],[9,6,3]]</code></li>
</ul>
<h1 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h1><ul>
<li>提交代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*****************</span></span><br><span class="line"><span class="comment"> * 思想：</span></span><br><span class="line"><span class="comment"> *     在旋转的时候，我们应该一行一行或者一列一列的来考虑</span></span><br><span class="line"><span class="comment"> *     如果按照一行一行来考虑，那么:</span></span><br><span class="line"><span class="comment"> *		          原矩阵的第一行会变成最后一列</span></span><br><span class="line"><span class="comment"> *               第二行会变成倒数第二列</span></span><br><span class="line"><span class="comment"> *               ......................</span></span><br><span class="line"><span class="comment">**********************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rotate</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; rotateMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mat, <span class="keyword">int</span> n) &#123;</span><br><span class="line">		<span class="comment">// write code here</span></span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line">		<span class="keyword">int</span> k = n - <span class="number">1</span>; <span class="comment">// 从最后一列开始，然后倒数第二列，倒数第三列</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 按行遍历原数组：mat</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;::iterator p = mat.begin(); p != mat.end();++p) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">				res[i][k] = (*p)[i];  <span class="comment">// p是一个指针，指向的是一个“街区”</span></span><br><span class="line">			&#125;</span><br><span class="line">			k--;</span><br><span class="line">		&#125;<span class="comment">// end for</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************</span></span><br><span class="line"><span class="comment"> * 思想：</span></span><br><span class="line"><span class="comment"> *     在旋转的时候，我们应该一行一行或者一列一列的来考虑</span></span><br><span class="line"><span class="comment"> *     如果按照一行一行来考虑，那么:</span></span><br><span class="line"><span class="comment"> *		          原矩阵的第一行会变成最后一列</span></span><br><span class="line"><span class="comment"> *               第二行会变成倒数第二列</span></span><br><span class="line"><span class="comment"> *               ..............</span></span><br><span class="line"><span class="comment">**********************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rotate</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; rotateMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mat, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">int</span> k = n - <span class="number">1</span>; <span class="comment">// 从最后一列开始，然后倒数第二列，倒数第三列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按行遍历原数组：mat</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;::iterator p = mat.begin(); p != mat.end();++p) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                res[i][k] = (*p)[i];  <span class="comment">// p是一个指针，指向的是一个“街区”</span></span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;<span class="comment">// end for</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===================== 测试代码 ======================== //</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; &amp;mat, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; mat[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mat(&#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125; &#125;);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(mat, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    Rotate r;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res = r.rotateMatrix(mat, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(res, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2018/01/18/004其他，顺时针旋转矩阵/001.png" title="测试结果显示">
<h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h1><ul>
<li>讨论区有人提出可以找规律，直接使用mat[i][j]被旋转到了mat[j][n-i-1]的位置</li>
<li>脑子果然是个好东西，以后一定要好好用用</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2016校招编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2016校招编程题 </tag>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 简单编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016校招真题-去哪儿：字符串替换]]></title>
      <url>/2018/01/17/003%E5%8E%BB%E5%93%AA%E5%84%BF%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2/</url>
      <content type="html"><![CDATA[<img src="/2018/01/17/003去哪儿，字符串替换/000.png" title="2016校招真题-去哪儿：字符串替换">
<a id="more"></a>
<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h1><ul>
<li>请你实现一个简单的字符串替换函数。原串中需要替换的占位符为”%s”,请按照参数列表的顺序一一替换占位符。若参数列表的字符数大于占位符个数。则将剩下的参数字符添加到字符串的结尾。</li>
<li>给定一个字符串A，同时给定它的长度n及参数字符数组arg，请返回替换后的字符串。保证参数个数大于等于占位符个数。保证原串由大小写英文字母组成，同时长度小于等于500。</li>
<li>测试样例：<code>&quot;A%sC%sE&quot;,7,[&#39;B&#39;,&#39;D&#39;,&#39;F&#39;]</code></li>
<li>返回：<code>&quot;ABCDEF&quot;</code></li>
</ul>
<h1 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">* 思路：</span></span><br><span class="line"><span class="comment">* 使用两个指针，分别一前一后；</span></span><br><span class="line"><span class="comment">* 如果这两个指针下的值恰好对应为%s，那么替换</span></span><br><span class="line"><span class="comment">*********************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringFormat</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">formatString</span><span class="params">(<span class="built_in">string</span> A, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; arg, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// write code here</span></span><br><span class="line">		<span class="keyword">char</span> buf[<span class="number">505</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 最终的结果存储数组</span></span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;  <span class="comment">// 循环变量</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> pre = <span class="number">0</span>, cur=<span class="number">1</span>; <span class="comment">// 指针循环变量</span></span><br><span class="line">		<span class="keyword">while</span> (pre &lt; n) &#123;</span><br><span class="line">			<span class="keyword">if</span> (A[pre] == <span class="string">'%'</span> &amp;&amp; cur&lt;n &amp;&amp; A[cur] == <span class="string">'s'</span>) &#123;</span><br><span class="line">				buf[i++] = arg[j++];</span><br><span class="line">				pre += <span class="number">2</span>;</span><br><span class="line">				cur += <span class="number">2</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				buf[i++] = A[pre];</span><br><span class="line">				++pre;</span><br><span class="line">				++cur;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="comment">// end while</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//  如果vector中参数多了，那么添加在最后</span></span><br><span class="line">		<span class="keyword">while</span> (j &lt; arg.size()) &#123;</span><br><span class="line">			buf[i++] = arg[j++];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">string</span>(buf);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h1><ul>
<li>其实一开始的想法是直接查找”%s”的位置，然后字符串替换</li>
<li>但是后来想到可以用指针的形式练习一下，所以最后就用指针的方式做了</li>
<li>看了一下大家讨论的结果<ul>
<li>有人提出把”%s”最为分割符，分割出数组，然后在连接起来，感觉很不错的样子</li>
<li>还有人提出利用正则表达式，厉害</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2016校招编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2016校招编程题 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016校招真题-京东：抛小球]]></title>
      <url>/2018/01/17/002%E4%BA%AC%E4%B8%9C%EF%BC%8C%E6%8A%9B%E5%B0%8F%E7%90%83/</url>
      <content type="html"><![CDATA[<img src="/2018/01/17/002京东，抛小球/000.jpg" title="2016校招真题-京东：抛小球">
<a id="more"></a>
<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h1><ul>
<li>小东和三个朋友一起在楼上抛小球，他们站在楼房的不同层，假设小东站的楼层距离地面N米，球从他手里自由落下，每次落地后反跳回上次下落高度的一半，并以此类推知道全部落到地面不跳，求4个小球一共经过了多少米？(数字都为整数)给定四个整数A,B,C,D，请返回所求结果。</li>
<li>测试样例：<code>100,90,80,70</code></li>
<li>结果：<code>1020</code></li>
</ul>
<h1 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Balls</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calcDistance</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">return</span> getHeight(A) + getHeight(B) + getHeight(C) + getHeight(D);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(<span class="keyword">float</span> h)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = h;  <span class="comment">// 第一次降落</span></span><br><span class="line">        <span class="keyword">while</span>(h &gt; <span class="number">0.0001</span>)&#123;   <span class="comment">// 只要是从高度大于0的地方降落，都会回弹降落高度的一半</span></span><br><span class="line">            h = h/<span class="number">2</span>; <span class="comment">// 回弹到原来高度的一半</span></span><br><span class="line">            sum += <span class="number">2</span>*h;  <span class="comment">// 再一次落地时，其实包含上去和下来</span></span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">// return sum;  // 题目要求最后的结果为整数，那么只有两种处理方式</span></span><br><span class="line">     <span class="comment">//                1)：舍去多余的部分  2)：结果+0.5取整数</span></span><br><span class="line">     <span class="comment">/*****************************************</span></span><br><span class="line"><span class="comment">     函数名: ceil</span></span><br><span class="line"><span class="comment">	 用 法: double ceil(double x);</span></span><br><span class="line"><span class="comment">	 功 能: 返回大于或者等于指定表达式的最小整数</span></span><br><span class="line"><span class="comment">     ******************************************/</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">ceil</span>(sum); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h1><ul>
<li>我认为这道题目考察的是对整数的处理，也就是说，不可以直接使用int型的高度</li>
<li>但是看到讨论区别人的代码后，感觉思路开阔了很多，有人指出，这就是等比数列求极限</li>
<li><p>以下是等比数列求极限思想代码</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Balls</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calcDistance</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>*(A+B+C+D);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2016校招编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2016校招编程题 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组类型，指针数组类型以及数组类型的指针]]></title>
      <url>/2018/01/16/001%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8C%87%E9%92%88/</url>
      <content type="html"><![CDATA[<img src="/2018/01/16/001数组类型，指针数组类型数组类型的指针/000.jpeg" title="C语言中压死初学者的三座大山">
<a id="more"></a>
<p>C/C++中有数组类型，指针数组，数组类型的指针，有人称之为压死C语言初学者的三座大山，那么如何区分呢？</p>
<h1 id="1-数组类型"><a href="#1-数组类型" class="headerlink" title="1.数组类型"></a>1.数组类型</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// int a[10];  // 这是我们常用的定义数组的方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义一个数组类型 int[10]</span></span><br><span class="line">	typedef int(MyArrayType)[10];  // 注意，这里MyArrayType就是一个数组类型，这个数组类型大小为10个int类型的内存大小</span><br><span class="line"></span><br><span class="line">	MyArrayType a; <span class="comment">// 相当于int a[10];</span></span><br><span class="line">	<span class="comment">// 赋值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"a[i] = %d\n"</span>, i, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2018/01/16/001数组类型，指针数组类型数组类型的指针/001.png" title="程序结果显示">
<h1 id="2-指针数组"><a href="#2-指针数组" class="headerlink" title="2.指针数组"></a>2.指针数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针数组类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 定义一个指向大小为10个int类型内存的指针数组类型</span></span><br><span class="line">	typedef int(*pMyArrayType)[10];</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">	 </span><br><span class="line">	pMyArrayType p = &amp;a; <span class="comment">// 这里为什么要对a取地址，想想？？  easy</span></span><br><span class="line"></span><br><span class="line">	 <span class="comment">// 赋值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		(*p)[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"p[%d] = %d\t"</span>, i, (*p)[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"a[%d] = %d\n"</span>, i, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2018/01/16/001数组类型，指针数组类型数组类型的指针/002.png" title="程序结果显示">
<h1 id="3-数组类型的指针"><a href="#3-数组类型的指针" class="headerlink" title="3.数组类型的指针"></a>3.数组类型的指针</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组类型的指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//  1.我们可以定义一个数组类型，然后用这个类型来定义数组类型的指针</span></span><br><span class="line">	<span class="comment">// 定义一个数组类型 int[10]</span></span><br><span class="line">	typedef int(MyArrayType)[10];  // 注意，这里MyArrayType就是一个数组类型，这个数组类型大小为10个int类型的内存大小</span><br><span class="line">	MyArrayType* p;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">	p = &amp;a;</span><br><span class="line">	<span class="comment">// 赋值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		(*p)[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"p[%d] = %d\t"</span>, i, (*p)[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"a[%d] = %d\n"</span>, i, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  2.直接定义  </span></span><br><span class="line">	<span class="keyword">int</span>(*pArr)[<span class="number">10</span>];  <span class="comment">// 注意，这里的pArr是变量的名字，不是类型，不可以用来定义新的变量</span></span><br><span class="line">	<span class="keyword">int</span> b[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	pArr = &amp;b;</span><br><span class="line">	<span class="comment">// 赋值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		(*pArr)[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"pArr[%d] = %d\t"</span>, i, (*pArr)[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"b[%d] = %d\n"</span>, i, b[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2018/01/16/001数组类型，指针数组类型数组类型的指针/003.png" title="程序结果显示">]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++难点 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
